
import argparse

import numpy as np

import torch

from get_data import get_data
from model import Net
import torch.optim as optim
import torch.nn as nn

batch_size = 100
num_workers = 2
classes = [1,2,3,4,5,6,7,8,9]


def main():
    """
    command_line_argument_parser = argparse.ArgumentParser(
        description="Enter the main parameters")

    command_line_argument_parser.add_argument(
        "input_directory",
        type=str,
        help="Input directory path with for images"
    )

    command_line_argument_parser.add_argument(
        "num_classes",
        type=int,
        help="Input the number of target classes"
    )

    command_line_arguments = command_line_argument_parser.parse_args()
    """


    trainloader, testloader = get_data("cifar",
                                       batch_size=batch_size,
                                       sub_sample=classes,
                                       #sub_sample=torch.tensor(classes),
                                       num_workers=num_workers)

    # get some random training images
    #dataiter = iter(trainloader)
    #images, labels = dataiter.next()
    # show images
    #imshow(torchvision.utils.make_grid(images))

    print("Number of classes: ", len(classes))
    net = Net(len(classes))
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

    print(trainloader.dataset)

    for epoch in range(100):  # loop over the dataset multiple times
        running_loss = 0.0
        for i, data in enumerate(trainloader, 0):

            # get the inputs; data is a list of [inputs, labels]
            inputs, labels = data

            # zero the parameter gradients
            optimizer.zero_grad()

            # forward + backward + optimize
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            # print statistics
            running_loss += loss.item()
            if i % 200 == 199:  # print every 2000 mini-batches
                print('[%d, %5d, %d] loss: %.3f' %
                      (epoch + 1, i + 1, epoch*(400) +i+1, running_loss / 200))
                running_loss = 0.0

    print('Finished Training')

    correct = 0
    total = 0
    with torch.no_grad():
        for data in testloader:
            images, labels = data
            outputs = net(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    print('Accuracy of the network on test images: %d %%' % (
            100 * correct / total))

    print("Saving model to ./logs")
    adrs = "./logs/model" + "".join(map(str, classes)) +".pth"
    torch.save(net.state_dict(), adrs)


if __name__ == '__main__':
    main()
